using System;
using WorldServer.net;
using System.Text;
using System.IO;
using System.Diagnostics;
using WorldServer;

namespace WorldServer.util
{
    public static class misc
    {
        /**
         * Update keys sent to the client to finish loading.
         * 530 cache 'update keys'.
         */
        public static byte[] UPDATE_KEYS = {
		0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xe0,
		0x28, 0xf9, 0xdd, 0x35, 0x00, 0x00, 0x01, 0x00,
		0xcd, 0x69, 0x8f, 0xd9, 0x00, 0x00, 0x00, 0x9f,
		0xa7, 0x3b, 0x1e, 0x66, 0x00, 0x00, 0x00, 0x8c,
		0x0f, 0x33, 0x50, 0xd1, 0x00, 0x00, 0x01, 0xee,
		0x0d, 0xfb, 0x03, 0x15, 0x00, 0x00, 0x00, 0x89,
		0x57, 0xd0, 0x86, 0x41, 0x00, 0x00, 0x01, 0xf6,
		0x54, 0xc0, 0xf2, 0xae, 0x00, 0x00, 0x00, 0x1a,
		0x7b, 0x7d, 0x3f, 0x12, 0x00, 0x00, 0x02, 0xc5,
		0xa9, 0x39, 0xb8, 0xc3, 0x00, 0x00, 0x00, 0x8e,
		0x7b, 0xfa, 0xb3, 0x36, 0x00, 0x00, 0x00, 0xd5,
		0x29, 0x76, 0x27, 0x6a, 0x00, 0x00, 0x00, 0x05,
		0x9a, 0x9d, 0xd3, 0x84, 0x00, 0x00, 0x00, 0x16,
		0x63, 0xa4, 0x69, 0x15, 0x00, 0x00, 0x01, 0xe4,
		0x8d, 0x1b, 0xfe, 0x8d, 0x00, 0x00, 0x00, 0x14,
		0xac, 0x7a, 0x01, 0x72, 0x00, 0x00, 0x00, 0x1a,
		0x6c, 0x7a, 0x69, 0x53, 0x00, 0x00, 0x00, 0x04,
		0x5e, 0xc7, 0x35, 0xb8, 0x00, 0x00, 0x01, 0x45,
		0x87, 0x3e, 0x74, 0x5f, 0x00, 0x00, 0x00, 0x8e,
		0x96, 0xd0, 0x2f, 0xaa, 0x00, 0x00, 0x00, 0xc3,
		0x7d, 0x46, 0x25, 0x36, 0x00, 0x00, 0x00, 0xae,
		0xe8, 0x41, 0x48, 0xba, 0x00, 0x00, 0x02, 0x6d,
		0x4e, 0x48, 0xb2, 0xb9, 0x00, 0x00, 0x00, 0x3c,
		0xb1, 0xfa, 0x99, 0x38, 0x00, 0x00, 0x00, 0x45,
		0x1c, 0xcb, 0x93, 0xdb, 0x00, 0x00, 0x00, 0x39,
		0x77, 0x8b, 0xda, 0x72, 0x00, 0x00, 0x00, 0x1f,
		0x53, 0xcc, 0xe6, 0xcc, 0x00, 0x00, 0x00, 0x05,
		0xea, 0x0d, 0x67, 0x1f, 0x00, 0x00, 0x00, 0x47,
		0x24, 0x57, 0x42, 0x5c, 0x00, 0x00, 0x00, 0x00
	};

        /**
     * Sent to the client to bypass worldlist loading.
     */
        public static byte[] WORLD_LIST_DATA = {
		0x00, 0x1c, 0x14, 0x01, 0x01, 0x25, 0x80, 0xe1, 
		0x00, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 
		0x6e, 0x73, 0x69, 0x73, 0x63, 0x6f, 0x20, 0x28, 
		0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4c, 
		0x61, 0x79, 0x65, 0x72, 0x29, 0x00, 0x80, 0xe1, 
		0x00, 0x53, 0x61, 0x6e, 0x20, 0x4a, 0x6f, 0x73, 
		0x65, 0x20, 0x28, 0x50, 0x65, 0x65, 0x72, 0x31, 
		0x29, 0x00, 0x80, 0xe1, 0x00, 0x53, 0x61, 0x6e, 
		0x20, 0x4a, 0x6f, 0x73, 0x65, 0x20, 0x28, 0x41, 
		0x62, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x29, 
		0x00, 0x4d, 0x00, 0x45, 0x75, 0x72, 0x6f, 0x70, 
		0x65, 0x20, 0x31, 0x00, 0x80, 0xe1, 0x00, 0x53, 
		0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x73, 
		0x69, 0x73, 0x63, 0x6f, 0x20, 0x28, 0x4e, 0x4c, 
		0x61, 0x79, 0x65, 0x72, 0x29, 0x00, 0x4d, 0x00, 
		0x55, 0x4b, 0x20, 0x31, 0x00, 0x26, 0x00, 0x43, 
		0x61, 0x6e, 0x61, 0x64, 0x61, 0x20, 0x32, 0x00, 
		0x80, 0xe1, 0x00, 0x41, 0x74, 0x6c, 0x61, 0x6e, 
		0x74, 0x61, 0x20, 0x28, 0x47, 0x6e, 0x61, 0x78, 
		0x29, 0x00, 0x80, 0xe1, 0x00, 0x44, 0x61, 0x6c, 
		0x6c, 0x61, 0x73, 0x20, 0x28, 0x50, 0x6c, 0x61, 
		0x6e, 0x65, 0x74, 0x29, 0x00, 0x80, 0xe1, 0x00, 
		0x53, 0x74, 0x20, 0x4c, 0x6f, 0x75, 0x69, 0x73, 
		0x20, 0x28, 0x43, 0x79, 0x62, 0x65, 0x72, 0x63, 
		0x6f, 0x6e, 0x29, 0x20, 0x31, 0x00, 0x80, 0xa1, 
		0x00, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6c, 
		0x61, 0x6e, 0x64, 0x73, 0x20, 0x31, 0x00, 0x80, 
		0xe1, 0x00, 0x43, 0x68, 0x69, 0x63, 0x61, 0x67, 
		0x6f, 0x20, 0x28, 0x4e, 0x4c, 0x61, 0x79, 0x65, 
		0x72, 0x29, 0x00, 0x80, 0xe1, 0x00, 0x53, 0x65, 
		0x61, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x28, 0x50, 
		0x65, 0x65, 0x72, 0x31, 0x29, 0x00, 0x80, 0xe1, 
		0x00, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 
		0x6b, 0x00, 0x80, 0xe1, 0x00, 0x4d, 0x69, 0x61, 
		0x6d, 0x69, 0x00, 0x10, 0x00, 0x41, 0x75, 0x73, 
		0x74, 0x72, 0x61, 0x6c, 0x69, 0x61, 0x00, 0x80, 
		0xbf, 0x00, 0x53, 0x77, 0x65, 0x64, 0x65, 0x6e, 
		0x00, 0x26, 0x00, 0x43, 0x61, 0x6e, 0x61, 0x64, 
		0x61, 0x20, 0x31, 0x00, 0x45, 0x00, 0x46, 0x69, 
		0x6e, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x32, 0x00, 
		0x80, 0xa1, 0x00, 0x4e, 0x65, 0x74, 0x68, 0x65, 
		0x72, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x32, 
		0x00, 0x80, 0xe1, 0x00, 0x53, 0x74, 0x20, 0x4c, 
		0x6f, 0x75, 0x69, 0x73, 0x20, 0x28, 0x43, 0x79, 
		0x62, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x29, 0x20, 
		0x32, 0x00, 0x80, 0xe1, 0x00, 0x55, 0x6e, 0x69, 
		0x74, 0x65, 0x64, 0x20, 0x53, 0x74, 0x61, 0x74, 
		0x65, 0x73, 0x20, 0x31, 0x00, 0x80, 0xe1, 0x00, 
		0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x53, 
		0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x32, 0x00, 
		0x80, 0xe1, 0x00, 0x55, 0x6e, 0x69, 0x74, 0x65, 
		0x64, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 
		0x20, 0x33, 0x00, 0x4d, 0x00, 0x45, 0x75, 0x72, 
		0x6f, 0x70, 0x65, 0x20, 0x32, 0x00, 0x4d, 0x00, 
		0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x20, 0x33, 
		0x00, 0x4d, 0x00, 0x55, 0x4b, 0x20, 0x32, 0x00, 
		0x65, 0x00, 0x49, 0x72, 0x65, 0x6c, 0x61, 0x6e, 
		0x64, 0x00, 0x80, 0xa6, 0x00, 0x4e, 0x65, 0x77, 
		0x20, 0x5a, 0x65, 0x61, 0x6c, 0x61, 0x6e, 0x64, 
		0x00, 0x45, 0x00, 0x46, 0x69, 0x6e, 0x6c, 0x61, 
		0x6e, 0x64, 0x20, 0x31, 0x00, 0x16, 0x00, 0x42, 
		0x65, 0x6c, 0x67, 0x69, 0x75, 0x6d, 0x00, 0x80, 
		0xa2, 0x00, 0x4e, 0x6f, 0x72, 0x77, 0x61, 0x79, 
		0x00, 0x3a, 0x00, 0x44, 0x65, 0x6e, 0x6d, 0x61, 
		0x72, 0x6b, 0x00, 0x80, 0xa1, 0x00, 0x4e, 0x65, 
		0x74, 0x68, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 
		0x73, 0x00, 0x4d, 0x00, 0x55, 0x4b, 0x00, 0x1f, 
		0x00, 0x42, 0x72, 0x61, 0x7a, 0x69, 0x6c, 0x00, 
		0x80, 0x98, 0x00, 0x4d, 0x65, 0x78, 0x69, 0x63, 
		0x6f, 0x00, 0x01, 0x80, 0xa9, 0x80, 0xa1, 0x00, 
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x72, 
		0x61, 0x64, 0x65, 0x20, 0x2d, 0x20, 0x46, 0x32, 
		0x50, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x01, 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x54, 
		0x72, 0x61, 0x64, 0x65, 0x20, 0x2d, 0x20, 0x4d, 
		0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x32, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x02, 0x15, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x54, 0x72, 0x61, 0x64, 
		0x65, 0x20, 0x2d, 0x20, 0x46, 0x32, 0x50, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x33, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x03, 0x16, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x72, 0x61, 
		0x64, 0x65, 0x20, 0x2d, 0x20, 0x46, 0x32, 0x50, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x34, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x04, 
		0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x72, 
		0x61, 0x64, 0x65, 0x20, 0x2d, 0x20, 0x46, 0x32, 
		0x50, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x35, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x05, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 
		0x61, 0x72, 0x62, 0x61, 0x72, 0x69, 0x61, 0x6e, 
		0x20, 0x41, 0x73, 0x73, 0x61, 0x75, 0x6c, 0x74, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x36, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x06, 
		0x17, 0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x07, 0x17, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x38, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x08, 0x17, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x39, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x09, 0x13, 0x00, 0x00, 
		0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x30, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x0a, 0x05, 0x00, 0x00, 
		0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x31, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x0b, 0x1c, 0x00, 0x00, 
		0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x32, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x0c, 0x16, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x33, 0x2e, 0x72, 0x75,
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x0d, 0x16, 0x00, 0x00, 
		0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x34, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x0e, 0x0f, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x43, 0x61, 0x73, 0x74, 0x6c, 
		0x65, 0x20, 0x57, 0x61, 0x72, 0x73, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x35, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x0f, 0x05, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x75, 0x6e, 
		0x6e, 0x69, 0x6e, 0x67, 0x20, 0x2d, 0x20, 0x41, 
		0x69, 0x72, 0x20, 0x52, 0x75, 0x6e, 0x65, 0x73, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x36, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x10, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x42, 
		0x6f, 0x75, 0x6e, 0x74, 0x79, 0x20, 0x48, 0x75, 
		0x6e, 0x74, 0x65, 0x72, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x37, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x11, 0x06, 0x00, 0x00, 
		0x00, 0x11, 0x00, 0x42, 0x6f, 0x75, 0x6e, 0x74, 
		0x79, 0x20, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x38, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x12, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x39, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x13, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 
		0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x47, 
		0x75, 0x74, 0x68, 0x69, 0x78, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x32, 0x30, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x14, 0x17, 0x00, 
		0x00, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x32, 0x31, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x15, 0x17, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x32, 0x32, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x16, 0x05, 0x00, 
		0x00, 0x00, 0x01, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x32, 0x33, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x17, 0x05, 0x00, 
		0x00, 0x00, 0x01, 0x00, 0x43, 0x61, 0x73, 0x74, 
		0x6c, 0x65, 0x20, 0x57, 0x61, 0x72, 0x73, 0x00,
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x32, 0x34, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x18, 
		0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x69, 
		0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x47, 0x75, 
		0x74, 0x68, 0x69, 0x78, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x32, 0x35, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x19, 0x17, 0x00, 0x00, 
		0x00, 0x05, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x32, 0x36, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x1a, 0x17, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x54, 0x72, 0x61, 0x64, 0x65, 
		0x20, 0x2d, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 
		0x72, 0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x32, 0x37, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x1b, 0x17, 0x00, 0x00, 0x00, 0x09, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x32, 0x38, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x1c, 0x17, 0x00, 0x00, 0x00, 0x08, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x32, 0x39, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x1d, 0x17, 0x00, 0x00, 0x00, 0x08, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x33, 0x30, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x1e, 0x17, 0x00, 0x00, 0x00, 0x01, 
		0x00, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x20, 0x50, 
		0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x33, 0x31, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x1f, 0x17, 
		0x00, 0x00, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x33, 0x32, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x20, 0x15, 
		0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x33, 0x33, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x21, 0x15, 
		0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x33, 0x34, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x22, 0x15, 
		0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x33, 0x35, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x23, 0x15, 
		0x00, 0x00, 0x00, 0x01, 0x00, 0x52, 0x75, 0x6e, 
		0x6e, 0x69, 0x6e, 0x67, 0x20, 0x2d, 0x20, 0x4e, 
		0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x52, 0x75, 
		0x6e, 0x65, 0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x33, 0x36, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x24, 0x06, 0x00, 0x00, 0x00, 
		0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x33, 0x37, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x25, 0x15, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x33, 0x38, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x26, 0x15, 0x00, 0x00, 0x00, 
		0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x33, 0x39, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x27, 0x15, 0x00, 0x00, 0x00, 
		0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x34, 0x30, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x28, 0x15, 0x00, 0x00, 0x00, 
		0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x34, 0x31, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x29, 0x17, 0x00, 0x00, 0x00, 
		0x01, 0x00, 0x52, 0x6f, 0x6c, 0x65, 0x2d, 0x50, 
		0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x53, 
		0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x34, 0x32, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x2a, 0x15, 0x00, 
		0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x34, 0x33, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x2b, 0x15, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x46, 0x69, 0x73, 0x74, 
		0x20, 0x6f, 0x66, 0x20, 0x47, 0x75, 0x74, 0x68, 
		0x69, 0x78, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x34, 0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x2c, 0x15, 0x00, 0x00, 0x00, 0x01, 
		0x00, 0x42, 0x75, 0x72, 0x74, 0x68, 0x6f, 0x72, 
		0x70, 0x65, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 
		0x20, 0x52, 0x6f, 0x6f, 0x6d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x34, 0x35, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x2d, 0x15, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x34, 0x36, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x2e, 0x17, 0x00, 
		0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x34, 0x37, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x2f, 0x17, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x34, 0x38, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x30, 0x1c, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x34, 0x39, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x31, 0x0f, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x43, 0x6c, 0x61, 0x6e, 
		0x20, 0x57, 0x61, 0x72, 0x73, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x35, 0x30, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x32, 0x21, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x56, 0x69, 0x6e, 0x65, 
		0x73, 0x77, 0x65, 0x65, 0x70, 0x65, 0x72, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x35, 0x31, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x33, 
		0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x43, 0x61,
		0x73, 0x74, 0x6c, 0x65, 0x20, 0x57, 0x61, 0x72, 
		0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x35, 0x32, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x34, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x50, 0x65, 0x73, 0x74, 0x20, 0x43, 0x6f, 0x6e, 
		0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x35, 0x33, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x35, 0x13, 0x00, 0x00, 
		0x00, 0x19, 0x00, 0x48, 0x69, 0x67, 0x68, 0x20, 
		0x4c, 0x76, 0x6c, 0x20, 0x44, 0x75, 0x65, 0x6c, 
		0x20, 0x2d, 0x20, 0x54, 0x6f, 0x75, 0x72, 0x6e, 
		0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x35, 0x34, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x36, 0x15, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x35, 0x35, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x37, 0x17, 
		0x00, 0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x35, 0x36, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x38, 0x15, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x35, 0x37, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x39, 0x15, 
		0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x6c, 0x61, 
		0x73, 0x74, 0x20, 0x46, 0x75, 0x72, 0x6e, 0x61, 
		0x63, 0x65, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x35, 0x38, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x3a, 0x15, 0x00, 0x00, 0x00, 0x09, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x35, 0x39, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x3b, 0x15, 0x00, 0x00, 0x00, 0x01, 
		0x00, 0x47, 0x72, 0x65, 0x61, 0x74, 0x20, 0x4f, 
		0x72, 0x62, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 
		0x63, 0x74, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x36, 0x30, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x3c, 0x16, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x47, 0x72, 0x65, 0x61, 0x74, 0x20, 0x4f, 
		0x72, 0x62, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 
		0x63, 0x74, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x36, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x3d, 0x16, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c,
		0x64, 0x36, 0x32, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x3e, 0x16, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x36, 0x33, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x3f, 0x16, 0x00, 0x00, 0x00, 0x09, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x36, 0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x40, 0x16, 0x00, 0x00, 0x00, 0x05, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x36, 0x35, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x41, 0x16, 0x00, 0x00, 0x00, 0x01, 
		0x00, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 
		0x20, 0x2d, 0x20, 0x4c, 0x61, 0x77, 0x20, 0x52, 
		0x75, 0x6e, 0x65, 0x73, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x36, 0x36, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x42, 0x20, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x42, 0x61, 0x72, 0x62, 0x61, 
		0x72, 0x69, 0x61, 0x6e, 0x20, 0x41, 0x73, 0x73, 
		0x61, 0x75, 0x6c, 0x74, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x36, 0x37, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x43, 0x1f, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x43, 0x6c, 0x61, 0x6e, 0x20, 
		0x57, 0x61, 0x72, 0x73, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x36, 0x38, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x44, 0x1e, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x50, 0x65, 0x73, 0x74, 0x20, 
		0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x36, 0x39, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x45, 
		0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x52, 0x75, 
		0x6e, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 
		0x6e, 0x67, 0x20, 0x2d, 0x20, 0x5a, 0x4d, 0x49, 
		0x20, 0x41, 0x6c, 0x74, 0x61, 0x72, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x30, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x46, 0x05, 
		0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x61, 0x72, 
		0x62, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x20, 0x41, 
		0x73, 0x73, 0x61, 0x75, 0x6c, 0x74, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x31, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x47, 0x06, 
		0x00, 0x00, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x32, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x48, 0x15, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x33, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x49, 0x15, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x34, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x4a, 0x15, 
		0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x35, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x4b, 0x15, 
		0x00, 0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x36, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x4c, 0x15, 
		0x00, 0x00, 0x00, 0x01, 0x00, 0x53, 0x68, 0x61, 
		0x64, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x4d, 
		0x6f, 0x72, 0x74, 0x27, 0x74, 0x6f, 0x6e, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x37, 0x37, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x4d, 
		0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x56, 0x69, 
		0x6e, 0x65, 0x73, 0x77, 0x65, 0x65, 0x70, 0x65, 
		0x72, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x37, 0x38, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x4e, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x54, 0x7a, 0x68, 0x61, 0x61, 0x72, 0x20, 0x46, 
		0x69, 0x67, 0x68, 0x74, 0x20, 0x50, 0x69, 0x74, 
		0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x37, 0x39, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x4f, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x38, 0x30, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x50, 0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x38, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x51, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x20, 0x57, 
		0x61, 0x72, 0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x38, 0x32, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x52, 0x05, 0x00, 0x00, 0x00, 
		0x11, 0x00, 0x44, 0x75, 0x65, 0x6c, 0x20, 0x2d, 
		0x20, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 
		0x65, 0x6e, 0x74, 0x73, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x38, 0x33, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x53, 0x05, 0x00, 0x00, 
		0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x38, 0x34, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x54, 0x15, 0x00, 0x00, 
		0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x38, 0x35, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x55, 0x15, 0x00, 0x00, 
		0x00, 0x02, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x38, 0x36, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x56, 0x15, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x38, 0x37, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x57, 0x15, 0x00, 0x00, 
		0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x38, 0x38, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x58, 0x15, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f,
		0x72, 0x6c, 0x64, 0x38, 0x39, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x59, 0x15, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x39, 0x30, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x5a, 0x15, 0x00, 0x00, 
		0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x39, 0x31, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x5b, 0x05, 0x00, 0x00, 
		0x00, 0x09, 0x00, 0x46, 0x69, 0x73, 0x74, 0x20, 
		0x6f, 0x66, 0x20, 0x47, 0x75, 0x74, 0x68, 0x69, 
		0x78, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x39, 0x32, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x5c, 0x15, 0x00, 0x00, 0x00, 0x08, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x39, 0x33, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x5d, 0x15, 0x00, 0x00, 0x00, 0x08, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x39, 0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x5e, 0x15, 0x00, 0x00, 0x00, 0x08, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x39, 0x35, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x5f, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x39, 0x36, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x60, 0x15, 0x00, 0x00, 0x00, 0x09, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x39, 0x37, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x61, 0x15, 0x00, 0x00, 0x00, 0x09, 0x00, 
		0x46, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 
		0x47, 0x75, 0x74, 0x68, 0x69, 0x78, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x39, 0x38, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x62, 0x15, 
		0x00, 0x00, 0x00, 0x01, 0x00, 0x52, 0x75, 0x6e, 
		0x6e, 0x69, 0x6e, 0x67, 0x20, 0x2d, 0x20, 0x4c, 
		0x61, 0x77, 0x20, 0x52, 0x75, 0x6e, 0x65, 0x73, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x39, 
		0x39, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x63, 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x47, 
		0x72, 0x6f, 0x75, 0x70, 0x20, 0x51, 0x75, 0x65, 
		0x73, 0x74, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x30, 0x30, 0x2e,
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x64, 0x15, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x30, 0x31, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x65, 
		0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x61, 
		0x6c, 0x61, 0x64, 0x6f, 0x72, 0x20, 0x50, 0x61, 
		0x72, 0x74, 0x79, 0x20, 0x52, 0x6f, 0x6f, 0x6d, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x30, 0x32, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x66, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x46, 0x61, 0x6c, 0x61, 0x64, 0x6f, 0x72, 0x20, 
		0x50, 0x61, 0x72, 0x74, 0x79, 0x20, 0x52, 0x6f, 
		0x6f, 0x6d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x31, 0x30, 0x33, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x67, 0x15, 0x00, 0x00, 0x00, 
		0x01, 0x00, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 
		0x65, 0x20, 0x42, 0x72, 0x65, 0x77, 0x69, 0x6e, 
		0x67, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x30, 0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x68, 0x05, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x54, 0x72, 0x61, 0x64, 0x65, 0x20, 0x2d, 
		0x20, 0x46, 0x32, 0x50, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x30, 0x35, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x69, 0x05, 0x00, 
		0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x30, 0x36, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x6a, 0x0f, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x69, 0x73, 
		0x74, 0x20, 0x6f, 0x66, 0x20, 0x47, 0x75, 0x74, 
		0x68, 0x69, 0x78, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x30, 0x37, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x6b, 0x0f, 0x00, 0x00, 
		0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x30, 0x38, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x6c, 0x0f, 0x00, 
		0x00, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x30, 0x39, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x6d, 0x0f, 
		0x00, 0x00, 0x00, 0x01, 0x00, 0x46, 0x69, 0x73, 
		0x74, 0x20, 0x6f, 0x66, 0x20, 0x47, 0x75, 0x74, 
		0x68, 0x69, 0x78, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x31, 0x30, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x6e, 0x0f, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x31, 0x31, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x6f, 0x0f, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x31, 0x32, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x70, 0x06, 
		0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x31, 0x33, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x71, 
		0x06, 0x00, 0x00, 0x00, 0x19, 0x00, 0x44, 0x75, 
		0x65, 0x6c, 0x20, 0x2d, 0x20, 0x54, 0x6f, 0x75, 
		0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x31, 0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x72, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x50, 0x65, 0x73, 0x74, 0x20, 0x43, 0x6f, 0x6e, 
		0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x31, 0x35, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x73, 0x06, 0x00, 
		0x00, 0x00, 0x01, 0x00, 0x46, 0x69, 0x73, 0x68, 
		0x69, 0x6e, 0x67, 0x20, 0x54, 0x72, 0x61, 0x77, 
		0x6c, 0x65, 0x72, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x31, 0x36, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x74, 0x10, 0x00, 0x00, 
		0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x31, 0x37, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x75, 0x10, 0x00, 
		0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x31, 0x38, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x76, 0x10, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x69, 0x73, 
		0x74, 0x20, 0x6f, 0x66, 0x20, 0x47, 0x75, 0x74, 
		0x68, 0x69, 0x78, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x31, 0x39, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x77, 0x20, 0x00, 0x00, 
		0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x32, 0x30, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x78, 0x10, 0x00, 
		0x00, 0x00, 0x11, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x32, 0x31, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x7a, 0x10, 
		0x00, 0x00, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x32, 0x33, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x7b, 
		0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2d, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x32, 
		0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x7c, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 
		0x74, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x20, 
		0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x32, 0x35, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x7d, 0x15, 0x00, 0x00, 0x00, 0x08, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x32, 0x36, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x7e, 0x15, 0x00, 0x00, 0x00, 0x08, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x31, 0x32, 0x37, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63,
		0x6f, 0x6d, 0x00, 0x7f, 0x15, 0x00, 0x00, 0x00, 
		0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x32, 0x38, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x80, 0x80, 0x15, 0x00, 
		0x00, 0x00, 0x01, 0x00, 0x43, 0x6c, 0x61, 0x6e, 
		0x20, 0x57, 0x61, 0x72, 0x73, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x32, 0x39, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0x81, 
		0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x54, 0x72, 
		0x61, 0x64, 0x65, 0x20, 0x2d, 0x20, 0x4d, 0x65, 
		0x6d, 0x62, 0x65, 0x72, 0x73, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x33, 0x30, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0x82, 
		0x11, 0x00, 0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x33, 
		0x31, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x80, 0x83, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x44, 0x75, 0x65, 0x6c, 0x20, 0x2d, 0x20, 0x53, 
		0x74, 0x61, 0x6b, 0x65, 0x64, 0x2f, 0x46, 0x72, 
		0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x33, 0x32, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 
		0x84, 0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2d, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x33, 0x33, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x80, 0x85, 0x12, 0x00, 0x00, 0x00, 0x08, 
		0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 
		0x64, 0x31, 0x33, 0x34, 0x2e, 0x72, 0x75, 0x6e, 
		0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 
		0x6f, 0x6d, 0x00, 0x80, 0x86, 0x1e, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x33, 0x35, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0x87, 0x12, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x33, 0x36, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 
		0x88, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2d, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x33, 0x37, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x80, 0x89, 0x12, 0x00, 0x00, 0x00, 0x01, 
		0x00, 0x52, 0x61, 0x74, 0x20, 0x50, 0x69, 0x74, 
		0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x33, 0x38, 0x2e, 0x72, 0x75, 0x6e, 0x65,
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x80, 0x8c, 0x0a, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x43, 0x6c, 0x61, 0x6e, 0x20, 0x57, 
		0x61, 0x72, 0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x34, 0x31, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x80, 0x8d, 0x13, 0x00, 
		0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x34, 0x32, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0x8e, 
		0x13, 0x00, 0x00, 0x00, 0x11, 0x00, 0x2d, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x34, 
		0x33, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x80, 0x8f, 0x13, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x50, 0x65, 0x73, 0x74, 0x20, 0x43, 0x6f, 0x6e, 
		0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 0x77, 0x6f, 
		0x72, 0x6c, 0x64, 0x31, 0x34, 0x34, 0x2e, 0x72, 
		0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 
		0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0x90, 0x11, 
		0x00, 0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 
		0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x34, 0x35, 
		0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 
		0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 
		0x93, 0x22, 0x00, 0x00, 0x00, 0x01, 0x00, 0x54, 
		0x7a, 0x68, 0x61, 0x61, 0x72, 0x20, 0x46, 0x69, 
		0x67, 0x68, 0x74, 0x20, 0x50, 0x69, 0x74, 0x73, 
		0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 
		0x34, 0x38, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 
		0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 
		0x00, 0x80, 0x94, 0x12, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x46, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 
		0x20, 0x47, 0x75, 0x74, 0x68, 0x69, 0x78, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x34, 
		0x39, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x80, 0x96, 0x12, 0x00, 0x00, 0x00, 0x09, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x35, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x80, 0x97, 0x11, 0x00, 0x00, 0x00, 
		0x10, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x35, 0x32, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x80, 0x98, 0x11, 0x00, 
		0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x35, 0x33, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0x99, 
		0x11, 0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x35, 
		0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x80, 0x9a, 0x11, 0x00, 0x00, 0x00, 0x08, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x35, 0x35, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x80, 0x9b, 0x24, 0x00, 0x00, 0x00, 
		0x01, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x35, 0x36, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x80, 0x9c, 0x11, 0x00, 
		0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x35, 0x37, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0x9d, 
		0x11, 0x00, 0x00, 0x00, 0x09, 0x00, 0x2d, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x35, 
		0x38, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x80, 0x9e, 0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 
		0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x35, 0x39, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x80, 0x9f, 0x15, 0x00, 0x00, 0x00, 
		0x13, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x36, 0x30, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x80, 0xa0, 0x15, 0x00, 
		0x00, 0x00, 0x12, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x36, 0x31, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0xa2, 
		0x21, 0x00, 0x00, 0x00, 0x05, 0x00, 0x2d, 0x00, 
		0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x31, 0x36, 
		0x33, 0x2e, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 
		0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 
		0x80, 0xa3, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 
		0x53, 0x74, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 
		0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 
		0x6e, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x36, 0x34, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x80, 0xa4, 0x1b, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x54, 0x72, 0x61, 0x64, 0x65, 0x20, 
		0x2d, 0x20, 0x46, 0x32, 0x50, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x36, 0x35, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x80, 0xa5, 
		0x1b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x43, 0x61, 
		0x73, 0x74, 0x6c, 0x65, 0x20, 0x57, 0x61, 0x72, 
		0x73, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 
		0x31, 0x36, 0x36, 0x2e, 0x72, 0x75, 0x6e, 0x65, 
		0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 0x63, 0x6f, 
		0x6d, 0x00, 0x80, 0xa6, 0x21, 0x00, 0x00, 0x00, 
		0x04, 0x00, 0x2d, 0x00, 0x00, 0x77, 0x6f, 0x72, 
		0x6c, 0x64, 0x31, 0x36, 0x37, 0x2e, 0x72, 0x75, 
		0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2e, 
		0x63, 0x6f, 0x6d, 0x00, 0x80, 0xa8, 0x1f, 0x00, 
		0x00, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x77, 
		0x6f, 0x72, 0x6c, 0x64, 0x31, 0x36, 0x39, 0x2e, 
		0x72, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0xda, 0xa8, 
		0xc3, 0xe2, 0x00, 0x07, 0xd0, 0x01, 0x07, 0xd0, 
		0x02, 0x07, 0xc9, 0x03, 0x06, 0xb0, 0x04, 0x03, 
		0x03, 0x05, 0x07, 0xd0, 0x06, 0x02, 0xe7, 0x07, 
		0x02, 0xbd, 0x08, 0x07, 0xc2, 0x09, 0x06, 0x82, 
		0x0a, 0x03, 0xe2, 0x0b, 0x02, 0xbf, 0x0c, 0x02, 
		0x74, 0x0d, 0x02, 0x70, 0x0e, 0x03, 0x51, 0x0f, 
		0x03, 0xef, 0x10, 0x05, 0x2e, 0x11, 0x01, 0x97, 
		0x12, 0x02, 0x6e, 0x13, 0x03, 0x8b, 0x14, 0x07, 
		0x59, 0x15, 0x03, 0x5b, 0x16, 0x04, 0x60, 0x17, 
		0x06, 0x24, 0x18, 0x04, 0x63, 0x19, 0x04, 0xa9, 
		0x1a, 0x03, 0x49, 0x1b, 0x03, 0x4c, 0x1c, 0x02, 
		0x89, 0x1d, 0x02, 0x6c, 0x1e, 0x07, 0x05, 0x1f, 
		0x03, 0x35, 0x20, 0x02, 0x6f, 0x21, 0x02, 0x68, 
		0x22, 0x02, 0x93, 0x23, 0x03, 0x4e, 0x24, 0x02,
		0x6b, 0x25, 0x02, 0x86, 0x26, 0x03, 0x5c, 0x27, 
		0x02, 0x79, 0x28, 0x02, 0x82, 0x29, 0x03, 0x4a, 
		0x2a, 0x02, 0x6f, 0x2b, 0x03, 0x3f, 0x2c, 0x03, 
		0x41, 0x2d, 0x03, 0x42, 0x2e, 0x02, 0x6b, 0x2f, 
		0x03, 0x55, 0x30, 0x02, 0x7c, 0x31, 0x03, 0x14, 
		0x32, 0x03, 0xd1, 0x33, 0x03, 0xd1, 0x34, 0x04, 
		0x4d, 0x35, 0x03, 0xd1, 0x36, 0x02, 0x71, 0x37, 
		0x03, 0x59, 0x38, 0x02, 0x86, 0x39, 0x03, 0x3d, 
		0x3a, 0x03, 0x3c, 0x3b, 0x03, 0x61, 0x3c, 0x02, 
		0x6c, 0x3d, 0x02, 0x81, 0x3e, 0x02, 0x76, 0x3f, 
		0x03, 0x3d, 0x40, 0x01, 0xae, 0x41, 0x03, 0x40, 
		0x42, 0x03, 0x07, 0x43, 0x04, 0x55, 0x44, 0x02, 
		0x8d, 0x45, 0x03, 0x46, 0x46, 0x04, 0x59, 0x47, 
		0x01, 0x8d, 0x48, 0x02, 0x75, 0x49, 0x02, 0x68, 
		0x4a, 0x02, 0x75, 0x4b, 0x03, 0x38, 0x4c, 0x03, 
		0x4f, 0x4d, 0x03, 0x48, 0x4e, 0x03, 0x3d, 0x4f, 
		0x01, 0x7a, 0x50, 0x03, 0xe3, 0x51, 0x04, 0x69, 
		0x52, 0x04, 0x6b, 0x53, 0x04, 0x64, 0x54, 0x02, 
		0x78, 0x55, 0x05, 0xc3, 0x56, 0x02, 0x8f, 0x57, 
		0x03, 0x43, 0x58, 0x03, 0x4b, 0x59, 0x02, 0x82, 
		0x5a, 0x03, 0x4d, 0x5b, 0x04, 0x5f, 0x5c, 0x02, 
		0x7c, 0x5d, 0x02, 0x7e, 0x5e, 0x02, 0x9e, 0x5f, 
		0x02, 0x75, 0x60, 0x03, 0x49, 0x61, 0x03, 0x43, 
		0x62, 0x03, 0x41, 0x63, 0x03, 0x51, 0x64, 0x02, 
		0x76, 0x65, 0x02, 0x82, 0x66, 0x03, 0x5b, 0x67, 
		0x03, 0x3f, 0x68, 0x03, 0xe8, 0x69, 0x03, 0xde, 
		0x6a, 0x02, 0x62, 0x6b, 0x02, 0x60, 0x6c, 0x01, 
		0x82, 0x6d, 0x02, 0x3b, 0x6e, 0x02, 0x47, 0x6f, 
		0x02, 0x3d, 0x70, 0x02, 0x69, 0x71, 0x02, 0x5a, 
		0x72, 0x02, 0x69, 0x73, 0x02, 0x69, 0x74, 0x02, 
		0x49, 0x75, 0x02, 0x6a, 0x76, 0x02, 0x6c, 0x77, 
		0x02, 0xab, 0x78, 0x02, 0x54, 0x7a, 0x01, 0x8b, 
		0x7b, 0x02, 0x55, 0x7c, 0x02, 0x6d, 0x7d, 0x02, 
		0x69, 0x7e, 0x02, 0x84, 0x7f, 0x02, 0x6e, 0x80, 
		0x80, 0x03, 0x44, 0x80, 0x81, 0x03, 0x4c, 0x80, 
		0x82, 0x02, 0x4d, 0x80, 0x83, 0x02, 0x64, 0x80, 
		0x84, 0x02, 0x47, 0x80, 0x85, 0x02, 0x65, 0x80, 
		0x86, 0x02, 0x9d, 0x80, 0x87, 0x02, 0x67, 0x80, 
		0x88, 0x02, 0x6e, 0x80, 0x89, 0x02, 0x62, 0x80, 
		0x8c, 0x07, 0x4f, 0x80, 0x8d, 0x06, 0x82, 0x80, 
		0x8e, 0x03, 0xd7, 0x80, 0x8f, 0x07, 0xcb, 0x80, 
		0x90, 0x02, 0x4c, 0x80, 0x93, 0x04, 0x5a, 0x80, 
		0x94, 0x02, 0x63, 0x80, 0x96, 0x02, 0x6a, 0x80, 
		0x97, 0x02, 0x70, 0x80, 0x98, 0x02, 0x6f, 0x80, 
		0x99, 0x02, 0x67, 0x80, 0x9a, 0x02, 0x63, 0x80, 
		0x9b, 0x02, 0x54, 0x80, 0x9c, 0x02, 0xc4, 0x80, 
		0x9d, 0x02, 0x7e, 0x80, 0x9e, 0x01, 0x50, 0x80, 
		0x9f, 0x02, 0x60, 0x80, 0xa0, 0x05, 0xc0, 0x80, 
		0xa2, 0x01, 0x77, 0x80, 0xa3, 0x05, 0x66, 0x80, 
		0xa4, 0x02, 0x6f, 0x80, 0xa5, 0x03, 0x1a, 0x80, 
		0xa6, 0x01, 0xbe, 0x80, 0xa8, 0x03, 0x6d 
	};

        public static byte[] CHAT_BIT_SIZES = { 22, 22, 22, 22, 22, 22, 21, 22, 22,
		20, 22, 22, 22, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 3, 8, 22, 16, 22, 16, 17, 7, 13, 13, 13,
		16, 7, 10, 6, 16, 10, 11, 12, 12, 12, 12, 13, 13, 14, 14, 11, 14,
		19, 15, 17, 8, 11, 9, 10, 10, 10, 10, 11, 10, 9, 7, 12, 11, 10, 10,
		9, 10, 10, 12, 10, 9, 8, 12, 12, 9, 14, 8, 12, 17, 16, 17, 22, 13,
		21, 4, 7, 6, 5, 3, 6, 6, 5, 4, 10, 7, 5, 6, 4, 4, 6, 10, 5, 4, 4,
		5, 7, 6, 10, 6, 10, 22, 19, 22, 14, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 22, 21, 22, 22, 22, 21,
		22, 22 };

        public static int[] CHAT_MASKS = { 0, 1024, 2048, 3072, 4096, 5120, 6144,
		8192, 9216, 12288, 10240, 11264, 16384, 18432, 17408, 20480, 21504,
		22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, 30720,
		31744, 32768, 33792, 34816, 35840, 36864, 536870912, 16777216,
		37888, 65536, 38912, 131072, 196608, 33554432, 524288, 1048576,
		1572864, 262144, 67108864, 4194304, 134217728, 327680, 8388608,
		2097152, 12582912, 13631488, 14680064, 15728640, 100663296,
		101187584, 101711872, 101974016, 102760448, 102236160, 40960,
		393216, 229376, 117440512, 104857600, 109051904, 201326592,
		205520896, 209715200, 213909504, 106954752, 218103808, 226492416,
		234881024, 222298112, 224395264, 268435456, 272629760, 276824064,
		285212672, 289406976, 223346688, 293601280, 301989888, 318767104,
		297795584, 298844160, 310378496, 102498304, 335544320, 299892736,
		300941312, 301006848, 300974080, 39936, 301465600, 49152,
		1073741824, 369098752, 402653184, 1342177280, 1610612736,
		469762048, 1476395008, -2147483648, -1879048192, 352321536,
		1543503872, -2013265920, -1610612736, -1342177280, -1073741824,
		-1543503872, 356515840, -1476395008, -805306368, -536870912,
		-268435456, 1577058304, -134217728, 360710144, -67108864,
		364904448, 51200, 57344, 52224, 301203456, 53248, 54272, 55296,
		56320, 301072384, 301073408, 301074432, 301075456, 301076480,
		301077504, 301078528, 301079552, 301080576, 301081600, 301082624,
		301083648, 301084672, 301085696, 301086720, 301087744, 301088768,
		301089792, 301090816, 301091840, 301092864, 301093888, 301094912,
		301095936, 301096960, 301097984, 301099008, 301100032, 301101056,
		301102080, 301103104, 301104128, 301105152, 301106176, 301107200,
		301108224, 301109248, 301110272, 301111296, 301112320, 301113344,
		301114368, 301115392, 301116416, 301117440, 301118464, 301119488,
		301120512, 301121536, 301122560, 301123584, 301124608, 301125632,
		301126656, 301127680, 301128704, 301129728, 301130752, 301131776,
		301132800, 301133824, 301134848, 301135872, 301136896, 301137920,
		301138944, 301139968, 301140992, 301142016, 301143040, 301144064,
		301145088, 301146112, 301147136, 301148160, 301149184, 301150208,
		301151232, 301152256, 301153280, 301154304, 301155328, 301156352,
		301157376, 301158400, 301159424, 301160448, 301161472, 301162496,
		301163520, 301164544, 301165568, 301166592, 301167616, 301168640,
		301169664, 301170688, 301171712, 301172736, 301173760, 301174784,
		301175808, 301176832, 301177856, 301178880, 301179904, 301180928,
		301181952, 301182976, 301184000, 301185024, 301186048, 301187072,
		301188096, 301189120, 301190144, 301191168, 301193216, 301195264,
		301194240, 301197312, 301198336, 301199360, 301201408, 301202432 };

        /**
         * Chat text arrays.
         */
        private static int[] CHAT_DECRYPT_KEYS = { 215, 203, 83, 158, 104, 101, 93, 84,
			107, 103, 109, 95, 94, 98, 89, 86, 70, 41, 32, 27, 24, 23, -1, -2,
			26, -3, -4, 31, 30, -5, -6, -7, 37, 38, 36, -8, -9, -10, 40, -11,
			-12, 55, 48, 46, 47, -13, -14, -15, 52, 51, -16, -17, 54, -18, -19,
			63, 60, 59, -20, -21, 62, -22, -23, 67, 66, -24, -25, 69, -26, -27,
			199, 132, 80, 77, 76, -28, -29, 79, -30, -31, 87, 85, -32, -33,
			-34, -35, -36, 197, -37, 91, -38, 134, -39, -40, -41, 97, -42, -43,
			133, 106, -44, 117, -45, -46, 139, -47, -48, 110, -49, -50, 114,
			113, -51, -52, 116, -53, -54, 135, 138, 136, 129, 125, 124, -55,
			-56, 130, 128, -57, -58, -59, 183, -60, -61, -62, -63, -64, 148,
			-65, -66, 153, 149, 145, 144, -67, -68, 147, -69, -70, -71, 152,
			154, -72, -73, -74, 157, 171, -75, -76, 207, 184, 174, 167, 166,
			165, -77, -78, -79, 172, 170, -80, -81, -82, 178, -83, 177, 182,
			-84, -85, 187, 181, -86, -87, -88, -89, 206, 221, -90, 189, -91,
			198, 254, 262, 195, 196, -92, -93, -94, -95, -96, 252, 255, 250,
			-97, 211, 209, -98, -99, 212, -100, 213, -101, -102, -103, 224,
			-104, 232, 227, 220, 226, -105, -106, 246, 236, -107, 243, -108,
			-109, 231, 237, 235, -110, -111, 239, 238, -112, -113, -114, -115,
			-116, 241, -117, 244, -118, -119, 248, -120, 249, -121, -122, -123,
			253, -124, -125, -126, -127, 259, 258, -128, -129, 261, -130, -131,
			390, 327, 296, 281, 274, 271, 270, -132, -133, 273, -134, -135,
			278, 277, -136, -137, 280, -138, -139, 289, 286, 285, -140, -141,
			288, -142, -143, 293, 292, -144, -145, 295, -146, -147, 312, 305,
			302, 301, -148, -149, 304, -150, -151, 309, 308, -152, -153, 311,
			-154, -155, 320, 317, 316, -156, -157, 319, -158, -159, 324, 323,
			-160, -161, 326, -162, -163, 359, 344, 337, 334, 333, -164, -165,
			336, -166, -167, 341, 340, -168, -169, 343, -170, -171, 352, 349,
			348, -172, -173, 351, -174, -175, 356, 355, -176, -177, 358, -178,
			-179, 375, 368, 365, 364, -180, -181, 367, -182, -183, 372, 371,
			-184, -185, 374, -186, -187, 383, 380, 379, -188, -189, 382, -190,
			-191, 387, 386, -192, -193, 389, -194, -195, 454, 423, 408, 401,
			398, 397, -196, -197, 400, -198, -199, 405, 404, -200, -201, 407,
			-202, -203, 416, 413, 412, -204, -205, 415, -206, -207, 420, 419,
			-208, -209, 422, -210, -211, 439, 432, 429, 428, -212, -213, 431,
			-214, -215, 436, 435, -216, -217, 438, -218, -219, 447, 444, 443,
			-220, -221, 446, -222, -223, 451, 450, -224, -225, 453, -226, -227,
			486, 471, 464, 461, 460, -228, -229, 463, -230, -231, 468, 467,
			-232, -233, 470, -234, -235, 479, 476, 475, -236, -237, 478, -238,
			-239, 483, 482, -240, -241, 485, -242, -243, 499, 495, 492, 491,
			-244, -245, 494, -246, -247, 497, -248, 502, -249, 506, 503, -250,
			-251, 505, -252, -253, 508, -254, 510, -255, -256, 0 };

        public static Random rnd = new Random();

        public static int random(int maxNumber)
        {
            return rnd.Next(maxNumber + 1); //+1 because rnd.Next(1) = only gives 0.
        }

        public static int random(int minNumber, int maxNumber)
        {
            return rnd.Next(minNumber, maxNumber); //this works differently the above one.. no +1 required.
        }

        public static double randomDouble()
        {
            return rnd.NextDouble();
        }

        public static void WriteError(string message)
        {
            // get call stack
            StackFrame frame = new StackFrame(1);
            string methodName = frame.GetMethod().Name;
            string className = frame.GetMethod().DeclaringType.Name;

            if (Constants.WRITE_LOG)
            {
                // get call stack
                StackTrace stackTrace = new StackTrace();

                // Write the string to a file.
                StreamWriter file = new StreamWriter(getServerPath() + @"\ErrorLog.txt", true);
                file.WriteLine("{0} {1} :", DateTime.Now.ToLongTimeString(), DateTime.Now.ToLongDateString());
                file.WriteLine("[" + className + "][" + methodName + "]");
                file.WriteLine(message);
                file.WriteLine("-------------------------------");
                file.Close();
            }
            Console.WriteLine("[" + className + "][" + methodName + "] " + message);
        }
        public static char[] playerNameXlateTable = {
      '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
      'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
      't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2',
      '3', '4', '5', '6', '7', '8', '9'
   };

        public static string longToPlayerName(long l)
        {
            if (l <= 0L || l >= 0x5b5b57f8a98a5dd1L)
                return "invalid_name";
            if (l % 37L == 0L)
                return "invalid_name";
            int i = 0;
            char[] ac = new char[12];
            while (l != 0L)
            {
                long l1 = l;
                l /= 37L;
                ac[11 - i++] = playerNameXlateTable[(int)(l1 - l * 37L)];
            }
            return new string(ac, 12 - i, i);
        }

        public static long playerNameToLong(string s)
        {
            long l = 0;
            for (int i = 0; i < s.Length && i < 12; i++)
            {
                char c = s[i];
                l *= 37L;
                if (c >= 'A' && c <= 'Z') l += (1 + c) - 65;
                else if (c >= 'a' && c <= 'z') l += (1 + c) - 97;
                else if (c >= '0' && c <= '9') l += (27 + c) - 48;
            }
            while (l % 37L == 0L && l != 0L) l /= 37L;
            return l;
        }

        public static string formatPlayerNameForDisplay(string name)
        {
            name = name.Replace("_", " ");
            System.Globalization.CultureInfo cultureInfo = System.Threading.Thread.CurrentThread.CurrentCulture;
            System.Globalization.TextInfo textInfo = cultureInfo.TextInfo;
            return textInfo.ToTitleCase(name.ToLower());
        }

        public static string getServerPath()
        {
            return System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location);
        }

        // gets the direction between the two given points
        // valid directions are N:0, NE:2, E:4, SE:6, S:8, SW:10, W:12, NW:14
        // the invalid (inbetween) direction are 1,3,5,7,9,11,13,15 i.e. odd
        // integers
        // returns -1, if src and dest are the same
        public static int direction(int srcX, int srcY, int destX, int destY)
        {
            int dx = destX - srcX, dy = destY - srcY;
            // a lot of cases that have to be considered here ... is there a more
            // sophisticated (and quick!) way?
            if (dx < 0)
            {
                if (dy < 0)
                {
                    if (dx < dy)
                        return 11;
                    else if (dx > dy)
                        return 9;
                    else
                        return 10; // dx == dy
                }
                else if (dy > 0)
                {
                    if (-dx < dy)
                        return 15;
                    else if (-dx > dy)
                        return 13;
                    else
                        return 14; // -dx == dy
                }
                else
                { // dy == 0
                    return 12;
                }
            }
            else if (dx > 0)
            {
                if (dy < 0)
                {
                    if (dx < -dy)
                        return 7;
                    else if (dx > -dy)
                        return 5;
                    else
                        return 6; // dx == -dy
                }
                else if (dy > 0)
                {
                    if (dx < dy)
                        return 1;
                    else if (dx > dy)
                        return 3;
                    else
                        return 2; // dx == dy
                }
                else
                { // dy == 0
                    return 4;
                }
            }
            else
            { // dx == 0
                if (dy < 0)
                {
                    return 8;
                }
                else if (dy > 0)
                {
                    return 0;
                }
                else
                { // dy == 0
                    return -1; // src and dest are the same
                }
            }
        }

        public static string optimizeText(string text)
        {
            char[] buf = text.ToCharArray();
            bool endMarker = true;	// marks the end of a sentence to make the next char capital
            for (int i = 0; i < buf.Length; i++)
            {
                char c = buf[i];
                if (endMarker && c >= 'a' && c <= 'z')
                {
                    buf[i] -= (char)0x20;	// transform lower case into upper case
                    endMarker = false;
                }
                if (c == '.' || c == '!' || c == '?') endMarker = true;
            }
            return new string(buf, 0, buf.Length);
        }

        public static byte[] textPack(string text)
        {
            if (text.Length > 255 /*80*/)
            {
                text = text.Substring(0, 255/*80*/);
            }
            int length = text.Length;
            int key = 0;
            int bitPosition = 1 << 3; //1 represents destOffet
            int destOffset = bitPosition >> 3;
            int srcOffset = 0;
            byte[] packedData = new byte[256];
            packedData[0] = (byte)length;
            for (; length > srcOffset; srcOffset++)
            {
                int textByte = 0xff & ASCIIEncoding.ASCII.GetBytes(text)[srcOffset];
                int mask = CHAT_MASKS[textByte];
                int size = CHAT_BIT_SIZES[textByte];
                destOffset = bitPosition >> 3;
                int bitOffset = bitPosition & 0x7;
                key &= (-bitOffset >> 31);
                bitPosition += size;
                int byteSize = (((bitOffset + size) - 1) >> 3) + destOffset;
                bitOffset += 24;
                packedData[destOffset] = (byte)(key = (key | (int)((uint)mask >> bitOffset)));
                if (byteSize > destOffset)
                {
                    destOffset++;
                    bitOffset -= 8;
                    packedData[destOffset] = (byte)(key = (int)((uint)mask >> bitOffset));
                    if (byteSize > destOffset)
                    {
                        destOffset++;
                        bitOffset -= 8;
                        packedData[destOffset] = (byte)(key = (int)((uint)mask >> bitOffset));
                        if (byteSize > destOffset)
                        {
                            bitOffset -= 8;
                            destOffset++;
                            packedData[destOffset] = (byte)(key = (int)((uint)mask >> bitOffset));
                            if (destOffset < byteSize)
                            {
                                bitOffset -= 8;
                                destOffset++;
                                packedData[destOffset] = (byte)(key = (int)((uint)mask << -bitOffset));
                            }
                        }
                    }
                }
            }
            Array.Resize(ref packedData, destOffset + 1);
            return packedData;
        }

        /**
         * Decrypt a string from the client for chat.
         */
        public static string textUnpack(byte[] packedData)
        {
            try
            {
                int offset = 1;
                int length = packedData[0] & 0xff;
                if (length == 0) return "";
                int charsDecoded = 0;
                int keyIndex = 0;
                StringBuilder sb = new StringBuilder();
                int charId;
                sbyte textByte; //must be signed
                for (; ; )
                {
                    if (offset == packedData.Length) break;
                    textByte = (sbyte)packedData[offset++];
                    if (textByte >= 0)
                        keyIndex++;
                    else
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (length <= ++charsDecoded)
                            break;
                        keyIndex = 0;
                    }
                    if ((textByte & 0x40) != 0)
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    else
                        keyIndex++;
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (++charsDecoded >= length)
                            break;
                        keyIndex = 0;
                    }
                    if ((0x20 & textByte) == 0)
                        keyIndex++;
                    else
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (length <= ++charsDecoded)
                            break;
                        keyIndex = 0;
                    }
                    if ((0x10 & textByte) == 0)
                        keyIndex++;
                    else
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (length <= ++charsDecoded)
                            break;
                        keyIndex = 0;
                    }
                    if ((0x8 & textByte) != 0)
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    else
                        keyIndex++;
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (++charsDecoded >= length)
                            break;
                        keyIndex = 0;
                    }
                    if ((0x4 & textByte) == 0)
                        keyIndex++;
                    else
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (length <= ++charsDecoded)
                            break;
                        keyIndex = 0;
                    }
                    if ((textByte & 0x2) != 0)
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    else
                        keyIndex++;
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (length <= ++charsDecoded)
                            break;
                        keyIndex = 0;
                    }
                    if ((textByte & 0x1) != 0)
                        keyIndex = CHAT_DECRYPT_KEYS[keyIndex];
                    else
                        keyIndex++;
                    if ((charId = CHAT_DECRYPT_KEYS[keyIndex]) < 0)
                    {
                        sb.Append((char)(byte)(~charId));
                        if (++charsDecoded >= length)
                            break;
                        keyIndex = 0;
                    }
                }
                return sb.ToString();
            }
            catch (Exception)
            {
                return "Error";
            }
        }

        // some misc functions
        public static string Hex(byte[] data)
        {
            return Hex(data, 0, data.Length);
        }

        public static string Hex(byte[] data, int offset, int len)
        {
            string temp = "";
            for (int cntr = 0; cntr < len; cntr++)
            {
                temp += string.Format("{0:x2} ", data[offset + cntr]);
            }
            return temp.ToUpper().Trim();

        }
    }
}